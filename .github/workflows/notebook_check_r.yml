name: Execute R notebooks

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
  # run once a week
  schedule:
    - cron: "0 0 * * 0"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.set-notebooks.outputs.notebooks }}
    steps:
    - id: checkout
      uses: actions/checkout@v4

    - id: python-setup
      name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - id: install-jupyter
      name: Install Jupyter
      run: |
        python -m pip install --upgrade pip
        pip install jupyter

    - id: r-setup
      name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.3'

    - name: Install system dependencies on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install -y make libicu-dev libxml2-dev libssl-dev pandoc librdf0-dev libnode-dev libcurl4-gnutls-dev libpng-dev

    - name: Restore R packages cache
      uses: actions/cache@v3
      with:
        path: ~/.local/share/renv
        key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ runner.os }}-renv-

    - id: r-dependencies
      name: Install R dependencies
      run: |
        R -e 'install.packages("renv")'
        R -e 'renv::restore()'
        R -e 'install.packages("IRkernel")'
        R -e 'IRkernel::installspec()'

    - id: set-notebooks
      name: Set notebook matrix
      run: |
        echo 'notebooks=[
          {"name": "integration", "path": "omics_types_integration/R/integration_notebook.ipynb"},
          {"name": "aggregation", "path": "proteomic_aggregation/R/proteomic_aggregation.ipynb"},
          {"name": "bioscales", "path": "bioscales_biogeochemical_metadata/R/bioscales_metadata.ipynb"},
          {"name": "neon", "path": "NEON_soil_metadata/R/NEON_data_exploration.ipynb"},
          {"name": "taxonomic", "path": "taxonomic_dist_by_soil_layer/R/taxonomic_dist_soil_layer_R.ipynb"},
          {"name": "nom", "path": "NOM_visualizations/R/NOM_R_notebook.ipynb"}
        ]' >> $GITHUB_OUTPUT

  execute-notebooks:
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        notebook: ${{ fromJson(needs.setup.outputs.notebooks) }}
    steps:
    - id: checkout
      uses: actions/checkout@v4

    - id: python-setup
      name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - id: install-jupyter
      name: Install Jupyter
      run: |
        python -m pip install --upgrade pip
        pip install jupyter

    - id: r-setup
      name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.3'

    - name: Install system dependencies on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install -y make libicu-dev libxml2-dev libssl-dev pandoc librdf0-dev libnode-dev libcurl4-gnutls-dev libpng-dev

    - name: Restore R packages cache
      uses: actions/cache@v3
      with:
        path: ~/.local/share/renv
        key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ runner.os }}-renv-

    - id: execute
      name: Execute ${{ matrix.notebook.name }} notebook
      run: |
        echo "Executing notebook: ${{ matrix.notebook.path }}"
        jupyter nbconvert --execute --to notebook --inplace "${{ matrix.notebook.path }}"

        if [ $? -ne 0 ]; then
          echo "Notebook ${{ matrix.notebook.name }} failed."
          echo "FAILED" > results-${{ matrix.notebook.name }}.txt
        else
          echo "SUCCESS" > results-${{ matrix.notebook.name }}.txt
        fi

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: notebook-results-${{ matrix.notebook.name }}
        path: results-${{ matrix.notebook.name }}.txt

  post-check:
    runs-on: ubuntu-latest
    needs: execute-notebooks
    if: always() # Always run this job
    steps:
    - name: Aggregate all notebook results
      uses: actions/download-artifact@v4
      with:
        path: results/

    - name: Check notebook results
      run: |
        FAILED_COUNT=$(grep -l "FAILED" results/*.txt | wc -l)

        if [ "$FAILED_COUNT" -gt 0 ]; then
          echo "At least one notebook failed execution."
          exit 1  # Fail the workflow
        else
          echo "All notebooks executed successfully!"
        fi
