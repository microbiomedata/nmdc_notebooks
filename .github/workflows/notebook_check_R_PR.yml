name: Execute modified R notebooks on PR

on:
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-notebooks: ${{ steps.find-changes.outputs.changed-notebooks }}
      has-changes: ${{ steps.find-changes.outputs.has-changes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed notebooks
      id: find-changes
      run: |
        # List of all R notebooks
        notebooks='[
          {"name": "integration", "path": "omics_types_integration/R/integration_notebook.ipynb"},
          {"name": "aggregation", "path": "proteomic_aggregation/R/proteomic_aggregation.ipynb"},
          {"name": "bioscales", "path": "bioscales_biogeochemical_metadata/R/bioscales_metadata.ipynb"},
          {"name": "neon", "path": "NEON_soil_metadata/R/NEON_data_exploration.ipynb"},
          {"name": "taxonomic", "path": "taxonomic_dist_by_soil_layer/R/taxonomic_dist_soil_layer_R.ipynb"},
          {"name": "nom", "path": "NOM_visualizations/R/NOM_R_notebook.ipynb"}
        ]'

        # Initialize changed_notebooks as valid JSON
        changed_notebooks="[]"
        has_changes=false

        # Get list of changed files
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        
        # Check if renv.lock changed (affects all notebooks)
        if echo "$changed_files" | grep -q "renv.lock"; then
          echo "✓ renv.lock changed - all notebooks need testing"
          changed_notebooks="$notebooks"
          has_changes=true
        else
          # Check if each notebook has been modified
          for notebook in $(echo "$notebooks" | jq -c '.[]'); do
            name=$(echo "$notebook" | jq -r '.name')
            path=$(echo "$notebook" | jq -r '.path')
            
            if echo "$changed_files" | grep -q "$path"; then
              changed_notebooks=$(echo "$changed_notebooks" | jq ". += [{\"name\": \"$name\", \"path\": \"$path\"}]")
              has_changes=true
              echo "✓ Notebook $name needs testing"
            fi
          done
        fi

        # Write compact JSON to outputs
        echo "changed-notebooks=$(echo "$changed_notebooks" | jq -c .)" >> $GITHUB_OUTPUT
        echo "has-changes=$has_changes" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Set RENV_PATHS_ROOT
      shell: bash
      run: |
        echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Jupyter
      run: |
        python -m pip install --upgrade pip
        pip install jupyter

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.3'

    - name: Install system dependencies on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install -y make libicu-dev libxml2-dev libssl-dev pandoc librdf0-dev libnode-dev libcurl4-gnutls-dev libpng-dev

    - name: Get R and OS version
      id: get-version
      shell: Rscript {0}
      run: |
        cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
        cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")

    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.RENV_PATHS_ROOT }}
        key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-renv-${{ hashFiles('renv.lock') }}
        restore-keys: |
          ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-renv-

    - name: Install R dependencies
      shell: Rscript {0}
      run: |
        install.packages("renv", repos = "https://cloud.r-project.org/")
        renv::activate()
        renv::restore()
        install.packages("IRkernel", repos = "https://cloud.r-project.org/")
        IRkernel::installspec(name = "ir", displayname = "R")

  execute-notebooks:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    continue-on-error: true
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        notebook: ${{ fromJson(needs.detect-changes.outputs.changed-notebooks) }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set RENV_PATHS_ROOT
      shell: bash
      run: |
        echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Jupyter
      run: |
        python -m pip install --upgrade pip
        pip install jupyter

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.3'

    - name: Install system dependencies on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install -y make libicu-dev libxml2-dev libssl-dev pandoc librdf0-dev libnode-dev libcurl4-gnutls-dev libpng-dev

    - name: Get R and OS version
      id: get-version
      shell: Rscript {0}
      run: |
        cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
        cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")

    - name: Restore R package cache
      uses: actions/cache@v3
      with:
        path: ${{ env.RENV_PATHS_ROOT }}
        key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-renv-${{ hashFiles('renv.lock') }}
        restore-keys: |
          ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-renv-

    - name: Install R dependencies
      shell: Rscript {0}
      run: |
        install.packages("renv", repos = "https://cloud.r-project.org/")
        renv::activate()
        renv::restore()
        install.packages("IRkernel", repos = "https://cloud.r-project.org/")
        IRkernel::installspec(name = "ir", displayname = "R")

    - name: Execute notebook
      run: |
        echo "Executing notebook: ${{ matrix.notebook.path }}"
        jupyter nbconvert --execute --to notebook --inplace "${{ matrix.notebook.path }}"

    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-${{ matrix.notebook.name }}
        path: ${{ matrix.notebook.path }}