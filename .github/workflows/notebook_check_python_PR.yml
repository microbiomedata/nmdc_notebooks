name: Execute modified python notebooks on PR

on:
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-notebooks: ${{ steps.find-changes.outputs.changed-notebooks }}
      has-changes: ${{ steps.find-changes.outputs.has-changes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed notebooks
      id: find-changes
      run: |
        # List of all notebooks
        notebooks='[
          {"name": "integration", "path": "omics_types_integration/python/integration_notebook.ipynb"},
          {"name": "over_representation", "path": "over_representation/python/overrepresentation_notebook.ipynb"},
          {"name": "aggregation", "path": "proteomic_aggregation/python/proteomic_aggregation.ipynb"},
          {"name": "bioscales", "path": "bioscales_biogeochemical_metadata/python/bioscales.ipynb"},
          {"name": "neon", "path": "NEON_soil_metadata/python/neon_soil_metadata_visual_exploration.ipynb"},
          {"name": "taxonomic", "path": "taxonomic_dist_by_soil_layer/python/taxonomic_dist_soil_layer.ipynb"},
          {"name": "nom", "path": "NOM_visualizations/python/nom_data.ipynb"}
        ]'

        # Get list of changed files
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        
        # Check if each notebook has been modified
        changed_notebooks="[]"
        has_changes=false
        for notebook in $(echo "$notebooks" | jq -c '.[]'); do
          name=$(echo "$notebook" | jq -r '.name')
          path=$(echo "$notebook" | jq -r '.path')
          
          if echo "$changed_files" | grep -q "$path"; then
            changed_notebooks=$(echo "$changed_notebooks" | jq ". += [{\"name\": \"$name\", \"path\": \"$path\"}]")
            has_changes=true
            echo "âœ“ Notebook $name needs testing"
          fi
        done

        # Output changed notebooks and flag
        echo "changed-notebooks=$changed_notebooks" >> $GITHUB_OUTPUT
        echo "has-changes=$has_changes" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter

  execute-notebooks:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    continue-on-error: true
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.detect-changes.outputs.changed-notebooks) }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter

    - name: Execute notebook
      run: |
        echo "Executing notebook: ${{ matrix.notebook.path }}"
        jupyter nbconvert --execute --to notebook --inplace "${{ matrix.notebook.path }}"

    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-${{ matrix.notebook.name }}
        path: ${{ matrix.notebook.path }}