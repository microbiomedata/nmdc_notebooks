name: Execute changed notebooks on PR

on:
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      integration: ${{ steps.changes.outputs.integration }}
      over_representation: ${{ steps.changes.outputs.over_representation }}
      aggregation: ${{ steps.changes.outputs.aggregation }}
      bioscales: ${{ steps.changes.outputs.bioscales }}
      neon: ${{ steps.changes.outputs.neon }}
      taxonomic: ${{ steps.changes.outputs.taxonomic }}
      nom: ${{ steps.changes.outputs.nom }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed notebooks
      id: changes
      run: |
        # Get list of changed files
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        echo "Changed files:"
        echo "$changed_files"
        echo ""
        
        # Check each notebook directory for changes
        integration=false
        over_representation=false
        aggregation=false
        bioscales=false
        neon=false
        taxonomic=false
        nom=false
        has_changes=false
        
        if echo "$changed_files" | grep -q "omics_types_integration/python/\|requirements.txt"; then
          integration=true
          has_changes=true
          echo "✓ Integration notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "over_representation/python/\|requirements.txt"; then
          over_representation=true
          has_changes=true
          echo "✓ Over representation notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "proteomic_aggregation/python/\|requirements.txt"; then
          aggregation=true
          has_changes=true
          echo "✓ Proteomic aggregation notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "bioscales_biogeochemical_metadata/python/\|requirements.txt"; then
          bioscales=true
          has_changes=true
          echo "✓ Bioscales notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "NEON_soil_metadata/python/\|requirements.txt"; then
          neon=true
          has_changes=true
          echo "✓ NEON notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "taxonomic_dist_by_soil_layer/python/\|requirements.txt"; then
          taxonomic=true
          has_changes=true
          echo "✓ Taxonomic notebook needs testing"
        fi
        
        if echo "$changed_files" | grep -q "NOM_visualizations/python/\|requirements.txt"; then
          nom=true
          has_changes=true
          echo "✓ NOM notebook needs testing"
        fi
        
        # Set outputs
        echo "integration=$integration" >> $GITHUB_OUTPUT
        echo "over_representation=$over_representation" >> $GITHUB_OUTPUT
        echo "aggregation=$aggregation" >> $GITHUB_OUTPUT
        echo "bioscales=$bioscales" >> $GITHUB_OUTPUT
        echo "neon=$neon" >> $GITHUB_OUTPUT
        echo "taxonomic=$taxonomic" >> $GITHUB_OUTPUT
        echo "nom=$nom" >> $GITHUB_OUTPUT
        echo "has-changes=$has_changes" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter

  execute-integration:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.integration == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute integration notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace omics_types_integration/python/integration_notebook.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "integration" > results/integration.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-integration
        path: results/

  execute-over-representation:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.over_representation == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute over representation notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace over_representation/python/overrepresentation_notebook.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "over_representation" > results/over_representation.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-over-representation
        path: results/

  execute-aggregation:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.aggregation == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute aggregation notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace proteomic_aggregation/python/proteomic_aggregation.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "aggregation" > results/aggregation.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-aggregation
        path: results/

  execute-bioscales:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.bioscales == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute bioscales notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace bioscales_biogeochemical_metadata/python/bioscales.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "bioscales" > results/bioscales.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-bioscales
        path: results/

  execute-neon:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.neon == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute neon notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace NEON_soil_metadata/python/neon_soil_metadata_visual_exploration.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "neon" > results/neon.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-neon
        path: results/

  execute-taxonomic:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.taxonomic == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute taxonomic notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace taxonomic_dist_by_soil_layer/python/taxonomic_dist_soil_layer.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "taxonomic" > results/taxonomic.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-taxonomic
        path: results/

  execute-nom:
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.nom == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter
    - name: Execute NOM notebook
      run: |
        jupyter nbconvert --execute --to notebook --inplace NOM_visualizations/python/nom_data.ipynb
    - name: Save result
      if: always()
      run: |
        mkdir -p results
        echo "nom" > results/nom.txt
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: result-nom
        path: results/

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, execute-integration, execute-over-representation, execute-aggregation, execute-bioscales, execute-neon, execute-taxonomic, execute-nom]
    if: always() && needs.detect-changes.outputs.has-changes == 'true'
    steps:
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        pattern: result-*
        path: results/
        merge-multiple: true

    - name: Generate summary
      run: |
        echo "## Changed Notebook Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        success_count=0
        total_count=0
        
        for notebook in integration over_representation aggregation bioscales neon taxonomic nom; do
          if [ -f "results/$notebook.txt" ]; then
            echo "✅ **$notebook**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            ((success_count++))
            ((total_count++))
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Total**: $total_count notebooks tested" >> $GITHUB_STEP_SUMMARY
        echo "**Successful**: $success_count" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **All changed notebooks executed successfully!**" >> $GITHUB_STEP_SUMMARY

  no-changes:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'false'
    steps:
    - name: No notebook changes
      run: |
        echo "## No Notebook Changes Detected" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ℹ️ This PR doesn't contain changes to notebook directories or requirements.txt." >> $GITHUB_STEP_SUMMARY